"""
Django settings for Instagram project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
from pathlib import Path
from dotenv import load_dotenv

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('INSTAGRAM_SECRET_KEY', 'sometext')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG =os.environ.get('INSTAGRAM_DEBUG')

ALLOWED_HOSTS = ["*"]


# Application definition
LOCAL_APPS = [
    'users',
]

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    *LOCAL_APPS,
    "django_celery_results",
    "django_celery_beat",
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'Instagram.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR / "templates"
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Instagram.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

import dj_database_url

DATABASE_URL = "postgresql://postgres:MoWCEKvckq3RdVwsnsa2@containers-us-west-131.railway.app:7435/railway"
DATABASES = {
    'default': {
        #'ENGINE': 'django.db.backends.sqlite3',
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'railway',
        'USER': 'postgres',
        'PASSWORD': 'MoWCEKvckq3RdVwsnsa2',
        'HOST': 'containers-us-west-131.railway.app',
        'PORT': '7435',
    }
}




# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql_psycopg2',
#         'NAME': 'Instagram', 
#         'USER': 'postgres', 
#         'PASSWORD': '1234',
#         'HOST': '127.0.0.1', 
#         'PORT': '5432',
#     }
# }


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

STATICFILES_DIRS = [
    BASE_DIR / 'static'
]

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


AUTH_USER_MODEL = 'users.User'



EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = "smtp.gmail.com"
EMAIL_USE_TLS = True
EMAIL_PORT = 587
EMAIL_HOST_USER = 'superbecommerce0@gmail.com'
EMAIL_HOST_PASSWORD = "nehmchlkbafphvly"




LOGIN_URL = '/login/'
LOGIN_REDIRECT_URL = 'home_page'
LOGOUT_URL = 'logout/'
LOGOUT_REDIRECT_URL = '/'

CELERY_IMPORTS = ('users.tasks',)

from datetime import timedelta
from celery.schedules import crontab

# CELERY_BROKER_URL = os.environ.get('CELERY_BROKER_URL')
# result_backend = os.environ.get('CELERY_RESULT_BACKEND')
# CELERY_BEAT_SCHEDULE = {
#     'update_instagram_stats': {
#         'task': 'users.tasks.update_instagram_stats',
#         'schedule': timedelta(minutes=1),
#     },
# }
CELERY_BROKER_URL = 'amqp://rabbitmq:rabbitmq@rabbitmq:5672'
result_backend = 'rpc://'
# CELERY_BROKER_URL = 'amqp://rabbitmq:5672//'
# CELERY_TIMEZONE = 'UTC'
CELERY_TASK_TRACK_STARTED = True
# CELERY_TASK_TIME_LIMIT = 30 * 60
CELERY_BEAT_SCHEDULE = {
    'update_instagram_stats': {
        'task': 'users.tasks.update_instagram_stats',
        'schedule': timedelta(minutes=3),
    },
}

# CELERY_BROKER_URL = 'amqp://localhost:5672'
# result_backend = 'celery_amqp_backend.AMQPBackend://'
# CELERY_BEAT_SCHEDULE = {
#     'update_instagram_stats': {
#         'task': 'users.tasks.update_instagram_stats',
#         'schedule': timedelta(minutes=1),
#     },
# }
